{
	"info": {
		"_postman_id": "f591ef1c-0b88-423e-80dd-9695b3df1e37",
		"name": "Restful Booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Booking",
			"item": [
				{
					"name": "Create Booking - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let obj = pm.variables.get(\"new_booking\");",
									"let fn = obj.firstname;",
									"let ln = obj.lastname;",
									"let ci = obj.checkin;",
									"let co = obj.checkout;",
									"let dp = obj.depositpaid;",
									"let price = obj.price;",
									"",
									"pm.test(`Check first name ${fn}`, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.booking.firstname).to.eql(fn);",
									"});",
									"",
									"pm.test(`Check last name ${ln}`, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.booking.lastname).to.eql(ln);",
									"});",
									"",
									"pm.test(`Check deposit paid ${dp}`, function (){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.booking.depositpaid).to.eql(dp);",
									"});",
									"",
									"pm.test(`Check price ${price}`, function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.booking.price).to.eql(price);",
									"});",
									"",
									"pm.test(`Check checkin date ${ci}`, function(){",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.booking.checkin).to.eql(ci);",
									"    ",
									"});",
									"",
									"pm.test(`Check checkout date ${co}`, function(){",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.booking.checkout).to.eql(co);",
									"});",
									"",
									"pm.test(`Check dates are valid`, function(){",
									"    let jsonData = pm.response.json();",
									"    let checkout = new Date(jsonData.booking.bookingdates.checkout);",
									"    let checkin = new Date(jsonData.booking.bookingdates.checkin);",
									"    pm.expect(checkout).to.be.above(checkin);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}'));",
									"pm.variables.set(\"lastname\",pm.variables.replaceIn('{{$randomLastName}}'));",
									"pm.variables.set(\"totalprice\",_.random(50,1000));",
									"pm.variables.set(\"depositpaid\",_.random(1) === 1);",
									"",
									"//lodash",
									"const moment = require(\"moment\");",
									"let checkin = moment().add(\"days\",_.random(1,180));",
									"pm.variables.set(\"checkin\", checkin.format(\"YYYY-MM-DD\"));",
									"",
									"let checkout = moment().add(\"days\",_.random(180,360));",
									"pm.variables.set(\"checkout\", checkout.format(\"YYYY-MM-DD\"));",
									"",
									"let needs = [ \"breakfast\",\"first floor\", \"early checkin\",\"late checkout\",null];",
									"let ran = _.random(0,needs.length-1);",
									"pm.variables.set(\"additionalneeds\", needs[ran]);",
									"",
									"//creating booking object",
									"let booking = {",
									"    \"firstname\": pm.variables.get(\"firstname\"),",
									"    \"lastname\": pm.variables.get(\"lastname\"),",
									"    \"totalprice\": pm.variables.get(\"totalprice\"),",
									"    \"depositpaid\": pm.variables.get(\"depositpaid\"),",
									"    \"bookingdates\":{",
									"        \"checkin\": pm.variables.get(\"checkin\"),",
									"        \"checkout\": pm.variables.get(\"checkout\")",
									"    },",
									"    \"additionalneeds\": pm.variables.get(\"additionalneeds\")",
									"}",
									"",
									"pm.variables.set(\"new_booking\",booking)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"{{firstname}}\",\n    \"lastname\" : \"{{lastname}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{depositpaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{additionalneeds}}\"\n}"
						},
						"url": {
							"raw": "{{rb_url}}/booking",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Booking - Invalid values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should not be 200\", function () {",
									"    pm.response.to.not.have.status(200);",
									"});",
									"",
									"pm.test(`First name should not be null`, function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.booking.firstname).to.not.eql(\"null\");",
									"});",
									"",
									"pm.test(`Last name should not be null`, function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.booking.lastname).to.not.eql(\"null\");",
									"});",
									"",
									"pm.test(`Price should not be negative`, function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.booking.totalprice).to.be.above(0);",
									"});",
									"",
									"pm.test(`Deposit paid should exist`, function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.booking.depositpaid).to.exist;",
									"});",
									"",
									"pm.test(`Checkout date should be bigger than checkin date`, function (){",
									"    let jsonData = pm.response.json();",
									"    let checkout = new Date(jsonData.booking.bookingdates.checkout);",
									"    let checkin = new Date(jsonData.booking.bookingdates.checkin);",
									"    pm.expect(checkout).to.be.above(checkin);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"firstname\", null);",
									"pm.variables.set(\"lastname\", null);",
									"pm.variables.set(\"totalprice\",-100);",
									"pm.variables.set(\"depositpaid\", true);",
									"",
									"//lodash",
									"const moment = require(\"moment\");",
									"let checkin = moment().add(\"days\",_.random(15,180));",
									"pm.variables.set(\"checkin\", checkin.format(\"YYYY-MM-DD\"));",
									"",
									"let checkout = moment().add(\"days\",_.random(1,14));",
									"pm.variables.set(\"checkout\", checkout.format(\"YYYY-MM-DD\"));",
									"",
									"pm.variables.set(\"additionalneeds\", null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"{{firstname}}\",\n    \"lastname\" : \"{{lastname}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{depositpaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{additionalneeds}}\"\n}"
						},
						"url": {
							"raw": "{{rb_url}}/booking",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Bookings",
			"item": [
				{
					"name": "Get All bookings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getTokenRequest = {",
									"  method: 'POST',",
									"  url: 'https://restful-booker.herokuapp.com/auth',",
									"  body: {",
									"      mode: 'formdata',",
									"      formdata: [",
									"          { key: 'username', value: 'admin' },",
									"          { key: 'password', value: 'password123' }",
									"      ]",
									"  }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, (err, response) => {",
									"  const jsonResponse = response.json();",
									"  const newAccessToken = jsonResponse.token;",
									"  console.log(newAccessToken);",
									"  pm.variables.set('authToken', newAccessToken);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response should have results\", function () {",
									"    pm.expect(pm.response.json().length).to.not.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/booking",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bookings By Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// get a predefined booking",
									"// pm.variables.set(\"firstname\",\"John\");",
									"// pm.variables.set(\"lastname\",\"Doe\");",
									"",
									"// or get a random booking of available names",
									"let url = pm.variables.get(\"rb_url\");",
									"let availableIds =[];",
									"",
									"const getBooking = {",
									"    url: pm.variables.get(\"rb_url\")+'/booking',",
									"    method: 'GET',",
									"    header: 'Content-Type:application/json\\nAccept:application/json'",
									"}",
									"",
									"pm.sendRequest(getBooking, function(err, res){",
									"    pm.expect(err).is.null;",
									"    res.json().forEach( element => availableIds.push(element.bookingid))",
									"    let randomId =  _.random(0,availableIds.length-1);",
									"    pm.sendRequest(`${url}/booking/${availableIds[randomId]}`, function (err, response){",
									"        console.log(response.json().firstname);",
									"        pm.variables.set(\"firstname\", response.json().firstname);",
									"        pm.variables.set(\"lastname\", response.json().lastname);",
									"    });",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response should have results\", function () {",
									"    pm.expect(pm.response.json().length).to.not.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/booking?firstname={{firstname}}&lastname={{lastname}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "{{firstname}}"
								},
								{
									"key": "lastname",
									"value": "{{lastname}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bookings by Date",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set predefined values",
									"// pm.variables.set(\"checkin\",\"2020-08-01\");",
									"// pm.variables.set(\"checkout\",\"2020-08-14\");",
									"",
									"// or set available random values ",
									"let url = pm.variables.get(\"rb_url\");",
									"let availableIds = [];",
									"",
									"const getBookings ={ ",
									"    url: `${url}/booking`,",
									"    method: 'GET',",
									"    header: 'Content-Type:application/json\\nAccept:application/json'",
									"}",
									"",
									"pm.sendRequest(getBookings,function(err, res){",
									"    pm.expect(err).is.null;",
									"    res.json().forEach(element => availableIds.push(element.bookingid));",
									"    let randomId = _.random(availableIds.length-1);",
									"    pm.sendRequest(`${url}/booking/${availableIds[randomId]}`, function(err, res){",
									"        pm.variables.set(\"checkin\",res.json().bookingdates.checkin);",
									"        pm.variables.set(\"checkout\",res.json().bookingdates.checkout);",
									"    })",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// this API has a bug it does not return values all the time",
									"pm.test(\"Response should have results\", function () {",
									"    pm.expect(pm.response.json().length).to.not.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/booking?checkin={{checkin}}&checkout={{checkout}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "{{checkin}}"
								},
								{
									"key": "checkout",
									"value": "{{checkout}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bookings by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// get a predefined ID",
									"// pm.variables.set(\"booking_id\",71)",
									"",
									"// of get a random of available ID's",
									"let url = pm.variables.get(\"rb_url\");",
									"let availableIds =[];",
									"",
									"const getBooking = {",
									"    url: pm.variables.get(\"rb_url\")+'/booking',",
									"    method: 'GET',",
									"    header: 'Content-Type:application/json\\nAccept:application/json'",
									"}",
									"",
									"pm.sendRequest(getBooking, function(err, res){",
									"    pm.expect(err).is.null;",
									"    res.json().forEach(element => availableIds.push(element.bookingid));",
									"    let randomId =  _.random(availableIds.length-1);",
									"    pm.variables.set(\"booking_id\",availableIds[randomId]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// this API has a bug it does not return values all the time",
									"pm.test(\"Response should have results\", function () {",
									"    pm.expect(pm.response.json().length).to.not.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/booking/{{booking_id}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking",
								"{{booking_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Booking",
			"item": [
				{
					"name": "Update Booking - Valid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.variables.get(\"rb_url\");",
									"const tokenUrl = `${url}/auth`;",
									"const getTokenRequest = {",
									"  method: 'POST',",
									"  header: { 'content-type': 'application/json' },",
									"  url: tokenUrl,",
									"  body: {",
									"      mode: 'raw',",
									"      raw : JSON.stringify({",
									"            \"username\" : \"admin\",",
									"            \"password\" : \"password123\"",
									"        })",
									"  }",
									"};",
									"pm.sendRequest(getTokenRequest, (err, response) => {",
									"  const jsonResponse = response.json();",
									"  const newAccessToken = jsonResponse.token;",
									"  pm.variables.set('authToken', newAccessToken);",
									"});",
									"",
									"let getBookings = {",
									"    url: `${url}/booking`,",
									"    method: 'GET',",
									"    header: 'Content-Type:application/json\\nAccept:application/json'",
									"}",
									"let availableIds=[]",
									"pm.sendRequest(getBookings, function(err, res){",
									"    pm.expect(err).is.null;",
									"    res.json().forEach(element => availableIds.push(element.bookingid));",
									"    let randomId =  _.random(availableIds.length-1);",
									"    pm.variables.set(\"booking_id\",availableIds[randomId]);",
									"})",
									"",
									"pm.variables.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}'));",
									"pm.variables.set(\"lastname\",pm.variables.replaceIn('{{$randomLastName}}'));",
									"pm.variables.set(\"totalprice\",_.random(50,1000));",
									"pm.variables.set(\"depositpaid\",_.random(1) === 1);",
									"",
									"//lodash",
									"const moment = require(\"moment\");",
									"let checkin = moment().add(\"days\",_.random(1,180));",
									"pm.variables.set(\"checkin\", checkin.format(\"YYYY-MM-DD\"));",
									"",
									"let checkout = moment().add(\"days\",_.random(180,360));",
									"pm.variables.set(\"checkout\", checkout.format(\"YYYY-MM-DD\"));",
									"",
									"let needs = [ \"breakfast\",\"first floor\", \"early checkin\",\"late checkout\",null];",
									"let ran = _.random(0,needs.length-1);",
									"pm.variables.set(\"additionalneeds\", needs[ran]);",
									"",
									"//creating booking object",
									"let booking = {",
									"    \"firstname\": pm.variables.get(\"firstname\"),",
									"    \"lastname\": pm.variables.get(\"lastname\"),",
									"    \"totalprice\": pm.variables.get(\"totalprice\"),",
									"    \"depositpaid\": pm.variables.get(\"depositpaid\"),",
									"    \"bookingdates\":{",
									"        \"checkin\": pm.variables.get(\"checkin\"),",
									"        \"checkout\": pm.variables.get(\"checkout\")",
									"    },",
									"    \"additionalneeds\": pm.variables.get(\"additionalneeds\")",
									"}",
									"",
									"pm.variables.set(\"new_booking\",booking)",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let obj = pm.variables.get(\"new_booking\");",
									"let fn = obj.firstname;",
									"let ln = obj.lastname;",
									"let ci = obj.bookingdates.checkin;",
									"let co = obj.bookingdates.checkout;",
									"let dp = obj.depositpaid;",
									"let price = obj.price;",
									"",
									"pm.test(`Check first name ${fn}`, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.firstname).to.eql(fn);",
									"});",
									"",
									"pm.test(`Check last name ${ln}`, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.lastname).to.eql(ln);",
									"});",
									"",
									"pm.test(`Check deposit paid ${dp}`, function (){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.depositpaid).to.eql(dp);",
									"});",
									"",
									"pm.test(`Check price ${price}`, function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.price).to.eql(price);",
									"});",
									"",
									"pm.test(`Check checkin date ${ci}`, function(){",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.bookingdates.checkin).to.eql(ci);",
									"    ",
									"});",
									"",
									"pm.test(`Check checkout date ${co}`, function(){",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.bookingdates.checkout).to.eql(co);",
									"});",
									"",
									"pm.test(`Check dates are valid`, function(){",
									"    let jsonData = pm.response.json();",
									"    let checkout = new Date(jsonData.bookingdates.checkout);",
									"    let checkin = new Date(jsonData.bookingdates.checkin);",
									"    pm.expect(checkout).to.be.above(checkin);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token={{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"{{firstname}}\",\n    \"lastname\" : \"{{lastname}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{depositpaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{additionalneeds}}\"\n}"
						},
						"url": {
							"raw": "{{rb_url}}/booking/{{booking_id}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking",
								"{{booking_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Booking - Invalid values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should not be 200\", function () {",
									"    pm.response.to.not.have.status(200);",
									"});",
									"",
									"pm.test(`First name should not be null`, function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.firstname).to.not.eql(\"null\");",
									"});",
									"",
									"pm.test(`Last name should not be null`, function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.lastname).to.not.eql(\"null\");",
									"});",
									"",
									"pm.test(`Price should not be negative`, function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.totalprice).to.be.above(0);",
									"});",
									"",
									"pm.test(`Deposit paid should exist`, function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.depositpaid).to.exist;",
									"});",
									"",
									"pm.test(`Checkout date should be bigger than checkin date`, function (){",
									"    let jsonData = pm.response.json();",
									"    let checkout = new Date(jsonData.bookingdates.checkout);",
									"    let checkin = new Date(jsonData.bookingdates.checkin);",
									"    pm.expect(checkout).to.be.above(checkin);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.variables.get(\"rb_url\");",
									"const tokenUrl = `${url}/auth`;",
									"const getTokenRequest = {",
									"  method: 'POST',",
									"  header: { 'content-type': 'application/json' },",
									"  url: tokenUrl,",
									"  body: {",
									"      mode: 'raw',",
									"      raw : JSON.stringify({",
									"            \"username\" : \"admin\",",
									"            \"password\" : \"password123\"",
									"        })",
									"  }",
									"};",
									"pm.sendRequest(getTokenRequest, (err, response) => {",
									"  const jsonResponse = response.json();",
									"  const newAccessToken = jsonResponse.token;",
									"  pm.variables.set('authToken', newAccessToken);",
									"});",
									"",
									"",
									"let getBookings = {",
									"    url: `${url}/booking`,",
									"    method: 'GET',",
									"    header: 'Content-Type:application/json\\nAccept:application/json'",
									"}",
									"let availableIds=[];",
									"pm.sendRequest(getBookings, function(err, res){",
									"    pm.expect(err).is.null;",
									"    res.json().forEach(element => availableIds.push(element.bookingid));",
									"    let randomId =  _.random(availableIds.length-1);",
									"    pm.variables.set(\"booking_id\",availableIds[randomId]);",
									"});",
									"",
									"pm.variables.set(\"firstname\", null);",
									"pm.variables.set(\"lastname\", null);",
									"pm.variables.set(\"totalprice\",-100);",
									"pm.variables.set(\"depositpaid\", true);",
									"",
									"//lodash",
									"const moment = require(\"moment\");",
									"let checkin = moment().add(\"days\",_.random(15,180));",
									"pm.variables.set(\"checkin\", checkin.format(\"YYYY-MM-DD\"));",
									"",
									"let checkout = moment().add(\"days\",_.random(1,14));",
									"pm.variables.set(\"checkout\", checkout.format(\"YYYY-MM-DD\"));",
									"",
									"pm.variables.set(\"additionalneeds\", null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token={{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"{{firstname}}\",\n    \"lastname\" : \"{{lastname}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{depositpaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{additionalneeds}}\"\n}"
						},
						"url": {
							"raw": "{{rb_url}}/booking/{{booking_id}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking",
								"{{booking_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Partial Update Booking",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"Rodney\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 150\n}"
						},
						"url": {
							"raw": "{{rb_url}}/booking/11",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking",
								"11"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Bookings",
			"item": [
				{
					"name": "Delete a Booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.variables.get(\"rb_url\");",
									"const tokenUrl = `${url}/auth`;",
									"const getTokenRequest = {",
									"  method: 'POST',",
									"  header: { 'content-type': 'application/json' },",
									"  url: tokenUrl,",
									"  body: {",
									"      mode: 'raw',",
									"      raw : JSON.stringify({",
									"            \"username\" : \"admin\",",
									"            \"password\" : \"password123\"",
									"        })",
									"  }",
									"};",
									"pm.sendRequest(getTokenRequest, (err, response) => {",
									"  const jsonResponse = response.json();",
									"  const newAccessToken = jsonResponse.token;",
									"  pm.variables.set('authToken', newAccessToken);",
									"});",
									"",
									"pm.variables.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}'));",
									"pm.variables.set(\"lastname\",pm.variables.replaceIn('{{$randomLastName}}'));",
									"pm.variables.set(\"totalprice\",_.random(50,1000));",
									"pm.variables.set(\"depositpaid\",_.random(1) === 1);",
									"",
									"//lodash",
									"const moment = require(\"moment\");",
									"let checkin = moment().add(\"days\",_.random(1,180));",
									"pm.variables.set(\"checkin\", checkin.format(\"YYYY-MM-DD\"));",
									"",
									"let checkout = moment().add(\"days\",_.random(1,14));",
									"pm.variables.set(\"checkout\", checkout.format(\"YYYY-MM-DD\"));",
									"",
									"let needs = [ \"breakfast\",\"first floor\", \"early checkin\",\"late checkout\",null];",
									"let ran = _.random(0,needs.length-1);",
									"pm.variables.set(\"additionalneeds\", needs[ran]);",
									"",
									"var booking = {",
									"    \"firstname\": pm.variables.get(\"firstname\"),",
									"    \"lastname\": pm.variables.get(\"lastname\"),",
									"    \"totalprice\": pm.variables.get(\"totalprice\"),",
									"    \"depositpaid\": pm.variables.get(\"depositpaid\"),",
									"    \"bookingdates\":{",
									"        \"checkin\": pm.variables.get(\"checkin\"),",
									"        \"checkout\": pm.variables.get(\"checkout\")",
									"    },",
									"    \"additionalneeds\": pm.variables.get(\"additionalneeds\")",
									"}",
									"",
									"pm.variables.set(\"new_booking\",booking);",
									"",
									"const createBooking = {",
									"    url: pm.variables.get(\"rb_url\")+'/booking',",
									"    method: 'POST',",
									"    header: 'Content-Type:application/json\\nAccept:application/json',",
									"    body: {",
									"        mode:'raw',",
									"        raw: JSON.stringify(pm.variables.get(\"new_booking\"))",
									"    }",
									"};",
									"",
									"console.log(createBooking);",
									"",
									"pm.sendRequest(createBooking, function (err, res){",
									"    pm.expect(err).is.null;",
									"    pm.variables.set(\"booking_id\", res.json().bookingid);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let url = pm.variables.get(\"rb_url\");",
									"pm.sendRequest(`${url}/booking/${pm.variables.get('booking_id')}`, function(err, res){",
									"    if(err){ ",
									"        console.log(err); ",
									"    }",
									"    pm.test('Booking no longer exists', function(){",
									"        pm.expect(err).to.equal(null);",
									"        pm.expect(res.code).to.equal(404);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token={{authToken}}"
							}
						],
						"url": {
							"raw": "{{rb_url}}/booking/{{booking_id}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking",
								"{{booking_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all Bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Size is 0\", function() {",
									"    pm.expect(pm.response.json().length).to.eql(0);",
									"   ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.variables.get(\"rb_url\");",
									"const tokenUrl = `${url}/auth`;",
									"const getTokenRequest = {",
									"  method: 'POST',",
									"  header: { 'content-type': 'application/json' },",
									"  url: tokenUrl,",
									"  body: {",
									"      mode: 'raw',",
									"      raw : JSON.stringify({",
									"            \"username\" : \"admin\",",
									"            \"password\" : \"password123\"",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, (err, response) => {",
									"  const jsonResponse = response.json();",
									"  const newAccessToken = jsonResponse.token;",
									"    console.log(jsonResponse);",
									"  pm.variables.set('authToken', newAccessToken);",
									"});",
									"",
									"",
									"pm.sendRequest(`${url}/booking`, function (err, response) {",
									"    let res = response.json();",
									"    res.forEach( element => ",
									"        pm.sendRequest({",
									"            url: `${url}/booking/${element.bookingid}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'Accept': 'application/json',",
									"                'Content-Type': 'application/json',",
									"                'Cookie': `token=${pm.variables.get(\"authToken\")}`",
									"            },",
									"        },function (err, response){",
									"           console.log(response) ",
									"        })",
									"    )  ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/booking",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Ping",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{rb_url}}/ping",
					"host": [
						"{{rb_url}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		}
	]
}